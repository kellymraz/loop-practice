 Thursday afternoon june 26

events in JQ include clicking on the mouse, form input, blurring... a way to trigger someting else to happen when an event is fired

syntax for event listener and handling the event

$(selector).on ( event type, callback)  takes 2 arguments

callback means something will call for you when the time is right

var adder = function(a, b){
	return a + b
}

var magicFuncion = function(cb, d, e){
	return adder(5, 10)
	return cb(d, e)

}

console.log(magicFunction(adder, 5, 10));

the above is a function invoking another function
a callback is usually passed into another function

all jq events use callbacks to execute your code

first event you use on your page is very important
document ready fires when all the html code is loaded. Document is its own special argument that refers to the DOM itself in jquery

$(document).on("ready", function(){

});

click, hover, typing, mouse are all events.  Event types are string names.

click:  create a button in html, create a class for it.
to select it in jq, you would do...


$("my-button").on("click", function(){
	alert("hey! You clicked me!")
});

a key word called "this" in jquery
"this" gets you to the DOM node, the actual target event
the event is implicitly defined.

selectors and the methods you run will always retrurn a JQ object

"this" allows you to choose just a single, for example, button rather than doing something to all the buttons as jquery would do by default


<a href="http://googl.com"></a>

made a link to take us to google, but we don't want that to happen right away.  

with jqu we can throttle the browsers behavior

$("a").on("click", function(event)) {

	event.preventDefault()
}


prevents the event from doing its default behavior

you can use a return false statement to do the same thing

$("a").on(click, function(event) {
	return confirm('Go to google?')
}

return as in return true or false


The event argument that we pass thru is its own object


There is a method called "append" that allows you to attach new elements to the dock

$("body").append ("<button class="my-button> This is a new button!!</)

jquery won't expand by default to handle events that are attached to the DOM tree

EVENTS BUBBLE UPWARD IN JAVASCRIPT

if we have a div with an h1 inside of it and a span inside of the h1, when the span is clicked the event bubbles up thru its ancestors

	span-->h1--->div

$(document.on("click", ", function(){
});

for delegated events you have to select an ancesotor to listen for the event. even though the buttonis added after the dom tree is loaded, the event is attached anyway



Delegated events-- filter out what would traditionally trigger a callback.  What you choose for your delegate should be a static html elemnt.

<div id="delegate> in html

$("#delegate").on("click", ".my-button", function(){
	$("delegate").append(<buttion class="my-button">)


	alert("does this even work?")
});


});

If you keep clicking on a button you will create button after button...

Delegated events:
keydown
keyup
scroll
mouseover
mouseout
focus
blur



focus v. blur


<input class="my-input"/> in html

$(".my-input").on("focus", function(){
	console.log("blah blah
	")


}

focus is when an input is effected or typed in or selected

$(window).on("scroll", function() {
	console.log( $(window)scrollTop() );

	if ($(window).scrollTop() >= 100) {

		do something like change color
	}

}

above will tell us how many pixels from the top we have scrolled down from